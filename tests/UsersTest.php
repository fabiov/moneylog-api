<?php
namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\User;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class UsersTest extends ApiTestCase
{
    // This trait provided by HautelookAliceBundle will take care of refreshing the database content
    // to a known state before each test
    use RefreshDatabaseTrait;

    public function testGetCollection(): void
    {
        // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
        static::createClient()->request('GET', '/api/users');
        try {
            $this->assertResponseStatusCodeSame(Response::HTTP_METHOD_NOT_ALLOWED);
        } catch (\Exception $exception) {
        }
    }

    public function testCreateUser(): void
    {
        $response = static::createClient()->request(Request::METHOD_POST, '/api/users', ['json' => [
            'email' => 'rasa.bianchi@test.it', 'name' => 'Rosa', 'surname' => 'Bianchi'
        ]]);

        $this->assertResponseStatusCodeSame(Response::HTTP_CREATED);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        $data = json_decode($response->getContent(), true);
        try {
            static::assertArraySubset([
                //            '@context' =>"\/api\/contexts\/User",
                //            '@id' => "\/api\/users\/3",
                //            '@type' => 'User',
                //            'id' => 3,
                'email' => 'rasa.bianchi@test.it',
                //            'name' => 'Rosa',
                //            'surname' => 'Bianchi',
                //            'accounts' => []
            ], $data);
        } catch (\Exception $e) {
        }

//        $this->assertJsonContains([
//            '@context' =>"\/api\/contexts\/User",
//            '@id' => "\/api\/users\/3",
//            '@type' => 'User',
//            'id' => 3,
//            'email' => 'rasa.bianchi@test.it',
//            'name' => 'Rosa',
//            'surname' => 'Bianchi',
//            'accounts' => []
//        ]);

//        $this->assertRegExp('~^/users/\d+$~', $response->toArray()['@id']);
        $this->assertMatchesResourceItemJsonSchema(User::class);
    }

//    public function testCreateInvalidUser(): void
//    {
//        static::createClient()->request('POST', '/users', ['json' => [
//            'isbn' => 'invalid',
//        ]]);
//
//        $this->assertResponseStatusCodeSame(400);
//        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
//
//        $this->assertJsonContains([
//            '@context' => '/contexts/ConstraintViolationList',
//            '@type' => 'ConstraintViolationList',
//            'hydra:title' => 'An error occurred',
//            'hydra:description' => 'isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.
//title: This value should not be blank.
//description: This value should not be blank.
//author: This value should not be blank.
//publicationDate: This value should not be null.',
//        ]);
//    }

//    public function testUpdateUser(): void
//    {
//        $client = static::createClient();
//        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
//        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
//        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
//        $iri = $this->findIriBy(User::class, ['isbn' => '9781344037075']);
//
//        $client->request('PUT', $iri, ['json' => [
//            'title' => 'updated title',
//        ]]);
//
//        $this->assertResponseIsSuccessful();
//        $this->assertJsonContains([
//            '@id' => $iri,
//            'isbn' => '9781344037075',
//            'title' => 'updated title',
//        ]);
//    }

//    public function testDeleteUser(): void
//    {
//        $client = static::createClient();
//        $iri = $this->findIriBy(User::class, ['isbn' => '9781344037075']);
//
//        $client->request('DELETE', $iri);
//
//        $this->assertResponseStatusCodeSame(204);
//        $this->assertNull(
//        // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
//            static::$container->get('doctrine')->getRepository(User::class)->findOneBy(['isbn' => '9781344037075'])
//        );
//    }
//
//    public function testLogin(): void
//    {
//        $response = static::createClient()->request('POST', '/login', ['json' => [
//            'email' => 'admin@example.com',
//            'password' => 'admin',
//        ]]);
//
//        $this->assertResponseIsSuccessfull();
//    }
}
